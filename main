#!/usr/bin/env node
var http = require('http');
var fs = require('fs');
var path = require('path');
var cp = require("child_process");
var file = require("./lib/file");
var webreq = require("./lib/req");
var port = 6174;
var url = require("url");
var flag_refresh = 0;
var rsite ;
process.on('uncaughtException', function(err) {
  console.log(err.stack);
});

function strlen(str){
  return new Buffer(str).length;
}

http.createServer(function(req, res) {
	var url = req.url;
	console.log("req: " + req.url);
	if(url == "/"){
		sendFile("index.html", res);
		return;
	}
	if(url == "/favicon.ico"){
		res.writeHead(404);
    res.end("0");
		return;
	}
	if(!url.match(/^\/http/)){
		res.writeHead(404);
    res.end("0");
		return;
	}
	var fname = "cached/" + url.substr(1);
	var remote = decodeURIComponent(url.substr(1));
	var config = {
    url: remote,
    method: req.method,
		headers: {
			'user-agent': req.headers['user-agent'],
			cookie: req.headers.cookie
		}
  };
	console.log("downloading "+remote);
	try{
		webreq.ajax(config, function(err, result, info){
			console.log("done");
			var ct = info.headers["content-type"];
			if(ct && (ct.match("image") || ct.match("video"))){
				for(var key in info.headers){
					res.setHeader(key, info.headers[key]);
				}
				fs.writeFileSync(fname, result, 'binary');
			}else if(ct.match("text/html") || ct.match("text/css")){
				result = modifyhref(result, remote);
				for(var key in info.headers){
					if(key.match(/content-length/i)) continue;
					res.setHeader(key, info.headers[key]);
				}
				res.setHeader("content-length", strlen(result));
				fs.writeFileSync(fname, result);
			}
			res.writeHead(info.statusCode);
			sendFile(fname, res);
		});
	}catch(e){
		console.log(e);
	}
}).listen(port, function(err){
  if(err) console.log(err);
  else console.log("listen to port "+port);
});

function cached(fname){
	if(flag_refresh) return false;
	return fs.existsSync(fname) && fs.statSync(fname).isFile();
}

function modifyhref(data, remote){

	data = data.replace(/(href)=([\'\"])(\S+)([\'\"])/g, function(match, p1, p2, p3, p4){
		return p1+'='+ p2 + getaddr(remote, p3) + p4;
	});
	data = data.replace(/(src)=([\'\"])(\S+)([\'\"])/g, function(match, p1, p2, p3, p4){
		return p1+'='+ p2 + getaddr(remote, p3) + p4;
	});

	data = data.replace(/url\(\'?([^\)\']+)\'?\)/g, function(match, p1){
		return 'url(' + getaddr(remote, p1) + ')';
	});


	return data;
}
function getaddr(remote, src){
	if(src.match(/^http/)){
		return encodeURIComponent(src);
	}
	if(rsite) return src;
	if(src.match(/^\/\//)){
		return encodeURIComponent(
			convertUrl(remote, "protocol") + ":/"+src.substr(1)
		);
	}
	if(src[0] == "/"){
		return encodeURIComponent(
			convertUrl(remote, "reqhost") + src
		);
	}
	return encodeURIComponent(
		convertUrl(remote, "reqhost") + "/"+src
	);
}

function convertUrl(urlx, to){
	var m = urlx.match(/^(https?):\/\/([^\/\?]+)(\S+)?/);
	if(!m) return null;
	var protocol = m[1];
	var host = m[2];
	var apath = m[3] || "";
	if(to == "req")
		return protocol + "://" + host + apath;
	else if(to == "reqhost")
		return protocol + "://" + host;
	else if(to == "protocol")
		return protocol;
}

function sendFile(filePath, res){
	if(fs.existsSync(filePath)){
		var stream = fs.createReadStream(filePath);
		stream.on('error', function() {
			res.writeHead(404);
			res.end("0");
		});
		stream.pipe(res);
	}
	else{
		res.writeHead(404);
    res.end("0");
	}
}
